openapi: 3.0.2
servers:
- url: https://api-sandbox.circle.com
info:
  version: 1.3.1
  title: Payouts API
  description: The Circle Payouts API allows you to programmatically make fast, global
    payouts to your customers, vendors, and suppliers. Use traditional methods like
    bank wires and ACH, or make payouts on supported blockchains.
tags:
- name: Payouts
  description: Create and get information on wire, ACH, SEPA and address book payouts.
- name: Crypto Address Book
  description: Manage blockchain addresses with metadata.
- name: Wires
  description: Create, get instructions, and get information on bank accounts for
    wire transfers.
- name: ACH
  description: Link and get information on bank account for ACH payments.
- name: SEPA
  description: Create and get information on SEPA accounts.
- name: Returns
  description: Get information on returned payouts.
- name: Crypto Exchange Rates
  description: Pull estimated exchange rate for crypto currencies.
paths:
  /v1/payouts:
    post:
      security:
      - bearerAuth: []
      summary: Create a payout
      description: "\nCreate a wire, ACH, SEPA or crypto payout.  \n\nThe following\
        \ table includes the supported pairs of amount.currency and toAmount.currency\
        \ for address book payouts:\n\n| amount.currency  | toAmount.currency |\n\
        | ---------------- | ------------      |\n| USD              | USD       \
        \        |\n| USD              | BTC               |\n| USD              |\
        \ ETH               |\n| USD              | MTC               |\n| EUR   \
        \           | EUR               |\n| BTC              | USD              \
        \ |\n| BTC              | BTC               |\n| ETH              | USD  \
        \             |\n| ETH              | ETH               |\n"
      operationId: createPayout
      tags:
      - Payouts
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/FiatPayoutCreationRequest'
              - $ref: '#/components/schemas/CryptoPayoutCreationRequest'
      responses:
        '201':
          description: Successfully created a payout.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: CreatePayoutResponse
                properties:
                  data:
                    oneOf:
                    - $ref: '#/components/schemas/FiatPayout'
                    - $ref: '#/components/schemas/CryptoPayout'
              examples:
                Fiat Payout:
                  value:
                    data:
                    - id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      sourceWalletId: '53535335'
                      destination:
                        type: wire
                        id: b8627ae8-732b-4d25-b947-1df8f4007a29
                        name: COMMERZBANK AG ****3000
                      amount:
                        amount: '3.14'
                        currency: USD
                      toAmount:
                        amount: '3.14'
                        currency: EUR
                      fees:
                        amount: '3.14'
                        currency: USD
                      status: pending
                      trackingRef: CIR-6ESOQANEP3NAO
                      errorCode: insufficient_funds
                      riskEvaluation:
                        decision: approved
                        reason: '3000'
                      adjustments:
                        fxCredit:
                          amount: '3.14'
                          currency: USD
                        fxDebit:
                          amount: '3.14'
                          currency: USD
                      return:
                        id: b8627ae8-732b-4d25-b947-1df8f4007a29
                        payoutId: abdb500d-4a59-457c-801f-2d418c8703ac
                        amount:
                          amount: '3.14'
                          currency: USD
                        fees:
                          amount: '3.14'
                          currency: USD
                        reason: payout_returned
                        status: pending
                        createDate: '2020-04-10T02:13:30.000Z'
                        updateDate: '2020-04-10T02:13:30.000Z'
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
                Crypto Payout:
                  value:
                    data:
                      id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      sourceWalletId: '53535335'
                      destination:
                        type: address_book
                        id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      amount:
                        amount: '3.14'
                        currency: USD
                      toAmount:
                        amount: '3.14'
                        currency: ETH
                      fees:
                        amount: '3.14'
                        currency: USD
                      status: pending
                      errorCode: transaction_denied
                      riskEvaluation:
                        decision: denied
                        reason: '4000'
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
    get:
      security:
      - bearerAuth: []
      parameters:
      - name: source
        description: Identifier for the source wallet. Filters the fetched payout
          results to only be from a specific source wallet. If not provided, payouts
          from all wallets will be returned.
        in: query
        required: false
        schema:
          type: string
          example: '1000565227'
      - name: destination
        description: Universally unique identifier (UUID v4) for the destination.
          Filters the fetched payout results made to a specific destination. If not
          provided, payouts to all destinations will be returned.
        in: query
        required: false
        schema:
          type: string
          format: uuid
          example: 54c1cbab-c419-450f-ad23-906fa03af7f0
      - name: type
        description: Destination type. Filters the results to fetch all payouts made
          to a specified destination type. This query parameter can be passed multiple
          times to fetch results matching multiple destination types. The address_book
          destination type cannot be combined with other types.
        in: query
        required: false
        schema:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PayoutDestinationType'
      - name: status
        description: Queries items with the specified status. Matches any status if
          unspecified.
        in: query
        required: false
        schema:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PayoutStatus'
      - name: sourceCurrency
        description: Queries items with the specified source currency `amount.currency`.
          Matches any source currency if unspecified.
        in: query
        required: false
        schema:
          type: string
          enum:
          - USD
          - EUR
          - BTC
          - ETH
          - MTC
          - FLW
          - MAN
      - name: destinationCurrency
        description: Queries items with the specified destination currency `toAmount.currency`.
          Matches any destination currency if unspecified.
        in: query
        required: false
        schema:
          type: string
          enum:
          - USD
          - EUR
          - BTC
          - ETH
          - MTC
          - FLW
          - MAN
      - $ref: '#/components/parameters/Chain'
      - $ref: '#/components/parameters/From'
      - $ref: '#/components/parameters/To'
      - $ref: '#/components/parameters/PageBefore'
      - $ref: '#/components/parameters/PageAfter'
      - $ref: '#/components/parameters/PageSize'
      summary: List all payouts
      operationId: listPayouts
      tags:
      - Payouts
      responses:
        '200':
          description: Successfully retrieved a list of payouts.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: ListPayoutsResponse
                properties:
                  data:
                    type: array
                    items:
                      anyOf:
                      - $ref: '#/components/schemas/FiatPayout'
                      - $ref: '#/components/schemas/CryptoPayout'
              examples:
                Fiat Payout:
                  value:
                    data:
                      id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      sourceWalletId: '53535335'
                      destination:
                        type: wire
                        id: b8627ae8-732b-4d25-b947-1df8f4007a29
                        name: COMMERZBANK AG ****3000
                      amount:
                        amount: '3.14'
                        currency: USD
                      toAmount:
                        amount: '3.14'
                        currency: EUR
                      fees:
                        amount: '3.14'
                        currency: USD
                      status: pending
                      trackingRef: CIR-6ESOQANEP3NAO
                      errorCode: insufficient_funds
                      riskEvaluation:
                        decision: approved
                        reason: '3000'
                      adjustments:
                        fxCredit:
                          amount: '3.14'
                          currency: USD
                        fxDebit:
                          amount: '3.14'
                          currency: USD
                      return:
                        id: b8627ae8-732b-4d25-b947-1df8f4007a29
                        payoutId: abdb500d-4a59-457c-801f-2d418c8703ac
                        amount:
                          amount: '3.14'
                          currency: USD
                        fees:
                          amount: '3.14'
                          currency: USD
                        reason: payout_returned
                        status: pending
                        createDate: '2020-04-10T02:13:30.000Z'
                        updateDate: '2020-04-10T02:13:30.000Z'
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
                Crypto Payout:
                  value:
                    data:
                    - id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      sourceWalletId: '53535335'
                      destination:
                        type: address_book
                        id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      amount:
                        amount: '3.14'
                        currency: USD
                      toAmount:
                        amount: '3.14'
                        currency: ETH
                      fees:
                        amount: '3.14'
                        currency: USD
                      status: pending
                      errorCode: transaction_denied
                      riskEvaluation:
                        decision: denied
                        reason: '4000'
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
        '401':
          $ref: '#/components/responses/NotAuthorized'
  /v1/payouts/{id}:
    get:
      parameters:
      - $ref: '#/components/parameters/IdPath'
      security:
      - bearerAuth: []
      summary: Get a payout
      operationId: getPayout
      tags:
      - Payouts
      responses:
        '200':
          description: Successfully retrieved a payout.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: GetPayoutResponse
                properties:
                  data:
                    oneOf:
                    - $ref: '#/components/schemas/FiatDetailedPayout'
                    - $ref: '#/components/schemas/CryptoPayout'
              examples:
                Fiat Payout:
                  value:
                    data:
                      id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      sourceWalletId: '53535335'
                      destination:
                        type: wire
                        id: b8627ae8-732b-4d25-b947-1df8f4007a29
                        name: COMMERZBANK AG ****3000
                      amount:
                        amount: '3.14'
                        currency: USD
                      toAmount:
                        amount: '3.14'
                        currency: EUR
                      fees:
                        amount: '3.14'
                        currency: USD
                      status: pending
                      trackingRef: CIR-6ESOQANEP3NAO
                      externalRef: YYYYMMDDXXXXXXXX012345
                      errorCode: insufficient_funds
                      riskEvaluation:
                        decision: approved
                        reason: '3000'
                      adjustments:
                        fxCredit:
                          amount: '3.14'
                          currency: USD
                        fxDebit:
                          amount: '3.14'
                          currency: USD
                      return:
                        id: b8627ae8-732b-4d25-b947-1df8f4007a29
                        payoutId: abdb500d-4a59-457c-801f-2d418c8703ac
                        amount:
                          amount: '3.14'
                          currency: USD
                        fees:
                          amount: '3.14'
                          currency: USD
                        reason: payout_returned
                        status: pending
                        createDate: '2020-04-10T02:13:30.000Z'
                        updateDate: '2020-04-10T02:13:30.000Z'
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
                Crypto Payout:
                  value:
                    data:
                      id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      sourceWalletId: '53535335'
                      destination:
                        type: address_book
                        id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      amount:
                        amount: '3.14'
                        currency: USD
                      toAmount:
                        amount: '3.14'
                        currency: ETH
                      fees:
                        amount: '3.14'
                        currency: USD
                      status: pending
                      errorCode: transaction_denied
                      riskEvaluation:
                        decision: denied
                        reason: '4000'
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /v1/addressBook/recipients:
    post:
      security:
      - bearerAuth: []
      summary: Create a recipient
      operationId: createAddressBookRecipient
      tags:
      - Crypto Address Book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressBookRecipientRequest'
      responses:
        '201':
          description: Successfully created an address book recipient.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: CreateAddressBookRecipientResponse
                properties:
                  data:
                    $ref: '#/components/schemas/AddressBookRecipient'
              examples:
                response:
                  value:
                    data:
                      id: 8755d0ea-14f9-4259-b092-de23c14b6568
                      chain: ETH
                      address: '0x45bfcf1a6289a0b77b4d3f7d12005a05949fd8c3'
                      metadata:
                        nickname: sample nickname
                        email: satoshi@circle.com
                        bns: sample.circle
                      status: pending
                      createDate: '2022-07-21T20:13:35.578678Z'
                      updateDate: '2022-07-21T20:19:24.859052Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
    get:
      security:
      - bearerAuth: []
      summary: List all recipients
      operationId: listAddressBookRecipients
      tags:
      - Crypto Address Book
      parameters:
      - name: address
        description: Filters results to fetch only address book recipients with the
          provided address.
        in: query
        required: false
        schema:
          type: string
      - name: chain
        description: Filters results to fetch only address book recipients with the
          provided chain.
        in: query
        required: false
        schema:
          type: string
      - name: email
        description: Filters results to fetch only address book recipients that have
          the provided email in their metadata.
        in: query
        required: false
        schema:
          type: string
      - name: status
        description: Filters results to fetch only address book recipients that have
          the provided status.
        in: query
        required: false
        schema:
          type: string
          enum:
          - pending
          - inactive
          - active
          - denied
      - $ref: '#/components/parameters/From'
      - $ref: '#/components/parameters/To'
      - $ref: '#/components/parameters/PageBefore'
      - $ref: '#/components/parameters/PageAfter'
      - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: Successfully retrieved a list of address book recipients.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: ListAddressBookRecipientsResponse
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AddressBookRecipient'
              examples:
                response:
                  value:
                    data:
                    - id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      chain: ALGO
                      address: '0x8381470ED67C3802402dbbFa0058E8871F017A6F'
                      addressTag: '123456789'
                      metadata:
                        nickname: sample nickname
                        email: satoshi@circle.com
                        bns: sample.circle
                      status: pending
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
        '401':
          $ref: '#/components/responses/NotAuthorized'
  /v1/addressBook/recipients/{id}:
    get:
      parameters:
      - $ref: '#/components/parameters/IdPath'
      security:
      - bearerAuth: []
      summary: Get a recipient
      operationId: getAddressBookRecipient
      tags:
      - Crypto Address Book
      responses:
        '200':
          description: Successfully retrieved an address book recipient.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: GetAddressBookRecipientResponse
                properties:
                  data:
                    $ref: '#/components/schemas/AddressBookRecipient'
              examples:
                response:
                  value:
                    data:
                      id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      chain: ALGO
                      address: '0x8381470ED67C3802402dbbFa0058E8871F017A6F'
                      addressTag: '123456789'
                      metadata:
                        nickname: sample nickname
                        email: satoshi@circle.com
                        bns: sample.circle
                      status: pending
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      parameters:
      - $ref: '#/components/parameters/IdPath'
      security:
      - bearerAuth: []
      summary: Modify a recipient
      operationId: modifyAddressBookRecipient
      tags:
      - Crypto Address Book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddressBookRecipientModifyRequest'
      responses:
        '200':
          description: Successfully updated the address book recipient.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: ModifyAddressBookRecipientResponse
                properties:
                  data:
                    $ref: '#/components/schemas/AddressBookRecipient'
              examples:
                response:
                  value:
                    data:
                      id: 8755d0ea-14f9-4259-b092-de23c14b6568
                      chain: ETH
                      address: '0x45bfcf1a6289a0b77b4d3f7d12005a05949fd8c3'
                      metadata:
                        nickname: sample nickname
                        email: satoshi@circle.com
                        bns: sample.circle
                      status: pending
                      createDate: '2022-07-21T20:13:35.578678Z'
                      updateDate: '2022-07-21T20:19:24.859052Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      parameters:
      - $ref: '#/components/parameters/IdPath'
      security:
      - bearerAuth: []
      summary: Delete a recipient
      operationId: deleteAddressBookRecipient
      tags:
      - Crypto Address Book
      responses:
        '200':
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          description: Successfully removed the address book recipient.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /v1/banks/wires:
    post:
      security:
      - bearerAuth: []
      summary: Create a Wire bank account
      operationId: createWireAccount
      tags:
      - Wires
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WireCreationRequest'
      responses:
        '201':
          description: Successfully created a bank account for wire transfers.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: CreateWireAccountResponse
                properties:
                  data:
                    $ref: '#/components/schemas/Wire'
              examples:
                response:
                  value:
                    data:
                      id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      status: pending
                      description: WELLS FARGO BANK, NA ****0010
                      trackingRef: CIR13FB13A
                      fingerprint: eb170539-9e1c-4e92-bf4f-1d09534fdca2
                      billingDetails:
                        name: Satoshi Nakamoto
                        city: Boston
                        country: US
                        line1: 100 Money Street
                        line2: Suite 1
                        district: MA
                        postalCode: '01234'
                      bankAddress:
                        bankName: SAN FRANCISCO
                        city: SAN FRANCISCO
                        country: US
                        line1: 100 Money Street
                        line2: Suite 1
                        district: CA
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
  /v1/banks/wires/{id}:
    get:
      parameters:
      - $ref: '#/components/parameters/IdPath'
      security:
      - bearerAuth: []
      summary: Get a Wire bank account
      operationId: getWireAccount
      tags:
      - Wires
      responses:
        '200':
          description: Successfully retrieved a bank account for wire transfers.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: GetWireAccountResponse
                properties:
                  data:
                    $ref: '#/components/schemas/Wire'
              examples:
                response:
                  value:
                    data:
                      id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      status: pending
                      description: WELLS FARGO BANK, NA ****0010
                      trackingRef: CIR13FB13A
                      fingerprint: eb170539-9e1c-4e92-bf4f-1d09534fdca2
                      billingDetails:
                        name: Satoshi Nakamoto
                        city: Boston
                        country: US
                        line1: 100 Money Street
                        line2: Suite 1
                        district: MA
                        postalCode: '01234'
                      bankAddress:
                        bankName: SAN FRANCISCO
                        city: SAN FRANCISCO
                        country: US
                        line1: 100 Money Street
                        line2: Suite 1
                        district: CA
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /v1/banks/ach:
    post:
      security:
      - bearerAuth: []
      summary: Create a ACH bank account
      operationId: createAchAccount
      tags:
      - ACH
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AchCreationRequest'
      responses:
        '201':
          description: Successfully created a bank account for ACH transfers.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: CreateAchAccountResponse
                properties:
                  data:
                    $ref: '#/components/schemas/Ach'
              examples:
                response:
                  value:
                    data:
                      id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      status: pending
                      accountNumber: '****6789'
                      routingNumber: '613334455'
                      billingDetails:
                        name: Satoshi Nakamoto
                        city: Boston
                        country: US
                        line1: 100 Money Street
                        line2: Suite 1
                        district: MA
                        postalCode: '01234'
                      bankAccountType: retail
                      bankAddress:
                        bankName: SAN FRANCISCO
                        city: SAN FRANCISCO
                        country: US
                        line1: 100 Money Street
                        line2: Suite 1
                        district: CA
                      fingerprint: eb170539-9e1c-4e92-bf4f-1d09534fdca2
                      errorCode: bank_account_authorization_expired
                      riskEvaluation:
                        decision: approved
                        reason: '3000'
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
                      metadata:
                        email: satoshi@circle.com
                        phoneNumber: '+14155555555'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
  /v1/banks/ach/{id}:
    get:
      parameters:
      - $ref: '#/components/parameters/IdPath'
      security:
      - bearerAuth: []
      summary: Get a ACH bank account
      operationId: getAchAccount
      tags:
      - ACH
      responses:
        '200':
          description: Successfully retrieved a bank account for ACH transfers.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: GetAchAccountResponse
                properties:
                  data:
                    $ref: '#/components/schemas/Ach'
              examples:
                response:
                  value:
                    data:
                      id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      status: pending
                      accountNumber: '****6789'
                      routingNumber: '613334455'
                      billingDetails:
                        name: Satoshi Nakamoto
                        city: Boston
                        country: US
                        line1: 100 Money Street
                        line2: Suite 1
                        district: MA
                        postalCode: '01234'
                      bankAccountType: retail
                      bankAddress:
                        bankName: SAN FRANCISCO
                        city: SAN FRANCISCO
                        country: US
                        line1: 100 Money Street
                        line2: Suite 1
                        district: CA
                      fingerprint: eb170539-9e1c-4e92-bf4f-1d09534fdca2
                      errorCode: bank_account_authorization_expired
                      riskEvaluation:
                        decision: approved
                        reason: '3000'
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
                      metadata:
                        email: satoshi@circle.com
                        phoneNumber: '+14155555555'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /v1/mocks/ach/accounts:
    post:
      security:
      - bearerAuth: []
      summary: Create a mock ACH bank account
      description: In the sandbox environment, create a mock ACH account and retrieve
        a processor token that can be used to link an ACH account.
      operationId: createMockAchAccount
      tags:
      - ACH
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MockAchAccountCreationRequest'
      responses:
        '201':
          description: Successfully created a mock ach payment.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: CreateMockAchAccountResponse
                properties:
                  data:
                    $ref: '#/components/schemas/MockAchAccountResponse'
              examples:
                response:
                  value:
                    data:
                      processorToken: processor-sandbox-circle-82cf95bb-43f8-4191-8d30-2c9f42853621
                      balance:
                        amount: '3.14'
                        currency: USD
                      account:
                        accountNumber: '123456789'
                        routingNumber: 011000028
                        description: My ACH account
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
  /v1/banks/sepa:
    post:
      security:
      - bearerAuth: []
      summary: Create a SEPA bank account
      operationId: createSepaAccount
      tags:
      - SEPA
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SepaCreationRequest'
      responses:
        '201':
          description: Successfully created a bank account for SEPA transfers.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: CreateSepaAccountResponse
                properties:
                  data:
                    $ref: '#/components/schemas/Sepa'
              examples:
                response:
                  value:
                    data:
                      id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      status: pending
                      description: Bank of Ireland ****0010
                      trackingRef: CIR13FB13A
                      fingerprint: eb170539-9e1c-4e92-bf4f-1d09534fdca2
                      riskEvaluation:
                        decision: approved
                        reason: '3000'
                      billingDetails:
                        name: Satoshi Nakamoto
                        city: Boston
                        country: US
                        line1: 100 Money Street
                        line2: Suite 1
                        district: MA
                        postalCode: '01234'
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
  /v1/banks/sepa/{id}:
    get:
      parameters:
      - $ref: '#/components/parameters/IdPath'
      security:
      - bearerAuth: []
      summary: Get a SEPA bank account
      operationId: getSepaAccount
      tags:
      - SEPA
      responses:
        '200':
          description: Successfully retrieved a bank account for SEPA transfers.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: GetSepaAccountResponse
                properties:
                  data:
                    $ref: '#/components/schemas/Sepa'
              examples:
                response:
                  value:
                    data:
                      id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      status: pending
                      description: Bank of Ireland ****0010
                      trackingRef: CIR13FB13A
                      fingerprint: eb170539-9e1c-4e92-bf4f-1d09534fdca2
                      riskEvaluation:
                        decision: approved
                        reason: '3000'
                      billingDetails:
                        name: Satoshi Nakamoto
                        city: Boston
                        country: US
                        line1: 100 Money Street
                        line2: Suite 1
                        district: MA
                        postalCode: '01234'
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
        '401':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /v1/returns:
    get:
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/From'
      - $ref: '#/components/parameters/To'
      - $ref: '#/components/parameters/PageBefore'
      - $ref: '#/components/parameters/PageAfter'
      - $ref: '#/components/parameters/PageSize'
      summary: List all payout returns
      description: Retrieve a list of Wire and ACH payout returns. Results will be
        sorted by create date descending; more recent returns will be at the beginning
        of the list.
      operationId: listReturns
      tags:
      - Returns
      responses:
        '200':
          description: Successfully retrieved a list of payout returns.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: ListReturnsResponse
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UnwithdrawalObject'
              examples:
                response:
                  value:
                    data:
                    - id: b8627ae8-732b-4d25-b947-1df8f4007a29
                      payoutId: abdb500d-4a59-457c-801f-2d418c8703ac
                      amount:
                        amount: '3.14'
                        currency: USD
                      fees:
                        amount: '3.14'
                        currency: USD
                      reason: payout_returned
                      status: pending
                      createDate: '2020-04-10T02:13:30.000Z'
                      updateDate: '2020-04-10T02:13:30.000Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
  /v1/exchange/rates/{trading-pair}:
    get:
      security:
      - bearerAuth: []
      summary: Get a exchange rate
      description: Fetch the current rates for the specified trading pair. The trading
        pair is defined by a base currency followed by a quote currency. The response
        contains buy and sell rates denominated in the quote currency. **Exchange
        rate is an estimate only and is subject to change by the time you submit the
        actual request.**
      operationId: getExchangeRates
      tags:
      - Crypto Exchange Rates
      parameters:
      - name: trading-pair
        in: path
        required: true
        schema:
          type: string
          enum:
          - BTC-USD
          - ETH-USD
          - FLOW-USD
      responses:
        '200':
          description: Successfully retrieved rates.
          headers:
            X-Request-Id:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                title: GetExchangeRatesResponse
                properties:
                  data:
                    $ref: '#/components/schemas/Rate'
              examples:
                response:
                  value:
                    data:
                      buy: '46317.59000'
                      sell: '45400.41000'
                      createDate: '2020-04-10T02:13:30.000Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/NotAuthorized'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    PayoutDestinationType:
      type: string
      description: The destination type.
      enum:
      - wire
      - ach
      - sepa
      - address_book
    PayoutStatus:
      type: string
      description: Status of the payout. Status `pending` indicates that the payout
        is in process; `complete` indicates it finished successfully; `failed` indicates
        it failed.
      enum:
      - pending
      - complete
      - failed
    Id:
      type: string
      description: Unique system generated identifier for the entity.
      format: uuid
      example: b8627ae8-732b-4d25-b947-1df8f4007a29
    FiatPayoutDestinationType:
      type: string
      description: The destination type.
      enum:
      - wire
      - ach
      - sepa
    FiatPayoutDestination:
      type: object
      description: The destination.
      required:
      - type
      - id
      properties:
        type:
          $ref: '#/components/schemas/FiatPayoutDestinationType'
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          description: Bank name plus last four digits of the bank account number
            or IBAN.
          example: COMMERZBANK AG ****3000
    FiatMoneyUsd:
      type: object
      required:
      - amount
      - currency
      properties:
        amount:
          description: Magnitude of the amount, in units of the currency, with a `.`.
          type: string
          example: '3.14'
        currency:
          description: Currency code.
          type: string
          enum:
          - USD
    PayoutMoney:
      type: object
      required:
      - amount
      - currency
      properties:
        amount:
          type: string
          description: Magnitude of the amount, in units of the currency, with a `.`.
          example: '3.14'
        currency:
          type: string
          description: Currency code for the amount.
          enum:
          - USD
          - EUR
          - BTC
          - ETH
          - MTC
          - FLW
          - MAN
    PayoutErrorCode:
      type: string
      nullable: true
      description: Indicates the failure reason of a payout. Only present for payouts
        in failed state. Possible values are [`insufficient_funds`, `transaction_denied`,
        `transaction_failed`, `transaction_returned`, `bank_transaction_error`, `fiat_account_limit_exceeded`,
        `invalid_bank_account_number`, `invalid_ach_rtn`, `invalid_wire_rtn`, `vendor_inactive`]'
      enum:
      - insufficient_funds
      - transaction_denied
      - transaction_failed
      - transaction_returned
      - bank_transaction_error
      - fiat_account_limit_exceeded
      - invalid_bank_account_number
      - invalid_ach_rtn
      - invalid_wire_rtn
      - vendor_inactive
    RiskEvaluation:
      type: object
      description: Results of risk evaluation. Only present if the payment is denied
        by Circle's risk service.
      nullable: true
      properties:
        decision:
          description: Enumerated decision of the account.
          type: string
          enum:
          - approved
          - denied
          - review
        reason:
          description: Risk reason for the definitive decision outcome.
          type: string
          nullable: true
          example: '3000'
    FinalAdjustments:
      type: object
      description: Final adjustment which increases (credits) or decreases (debits)
        the total returned amount to the source wallet.
      nullable: true
      properties:
        fxCredit:
          $ref: '#/components/schemas/FiatMoneyUsd'
        fxDebit:
          $ref: '#/components/schemas/FiatMoneyUsd'
    IdPayout:
      type: string
      description: Universally unique identifier (UUID v4) of the payout that is associated
        with the return.
      format: uuid
      example: abdb500d-4a59-457c-801f-2d418c8703ac
    UtcTimestamp:
      type: string
      description: ISO-8601 UTC date/time format.
      example: '2020-04-10T02:13:30.000Z'
    UnwithdrawalObject:
      type: object
      description: Return information if the payout is returned by bank. Only present
        if `errorCode` of payout is `transaction_returned`.
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/Id'
        payoutId:
          $ref: '#/components/schemas/IdPayout'
        amount:
          $ref: '#/components/schemas/FiatMoneyUsd'
        fees:
          $ref: '#/components/schemas/FiatMoneyUsd'
        reason:
          type: string
          description: Reason for the return.
          example: payout_returned
        status:
          type: string
          description: Status of the return. A `pending` status indicates that the
            return is in process; `complete` indicates it finished successfully; `failed`
            indicates it failed.
          enum:
          - pending
          - complete
          - failed
        createDate:
          $ref: '#/components/schemas/UtcTimestamp'
        updateDate:
          $ref: '#/components/schemas/UtcTimestamp'
    FiatPayout:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        sourceWalletId:
          type: string
          description: The identifier of the source wallet used to fund a payout.
          example: '53535335'
        destination:
          $ref: '#/components/schemas/FiatPayoutDestination'
        amount:
          $ref: '#/components/schemas/FiatMoneyUsd'
        toAmount:
          $ref: '#/components/schemas/PayoutMoney'
        fees:
          $ref: '#/components/schemas/FiatMoneyUsd'
        status:
          $ref: '#/components/schemas/PayoutStatus'
        trackingRef:
          description: A payout tracking reference. Will be present once known.
          nullable: true
          example: CIR-6ESOQANEP3NAO
        errorCode:
          $ref: '#/components/schemas/PayoutErrorCode'
        riskEvaluation:
          $ref: '#/components/schemas/RiskEvaluation'
        adjustments:
          $ref: '#/components/schemas/FinalAdjustments'
        return:
          $ref: '#/components/schemas/UnwithdrawalObject'
        createDate:
          $ref: '#/components/schemas/UtcTimestamp'
        updateDate:
          $ref: '#/components/schemas/UtcTimestamp'
    CryptoPayoutDestinationType:
      type: string
      description: The destination type.
      enum:
      - address_book
    CryptoPayoutDestination:
      type: object
      description: The destination.
      required:
      - type
      - id
      properties:
        type:
          $ref: '#/components/schemas/CryptoPayoutDestinationType'
        id:
          $ref: '#/components/schemas/Id'
    CryptoPayout:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        sourceWalletId:
          type: string
          description: The identifier of the source wallet used to fund a payout.
          example: '53535335'
        destination:
          $ref: '#/components/schemas/CryptoPayoutDestination'
        amount:
          $ref: '#/components/schemas/PayoutMoney'
        toAmount:
          $ref: '#/components/schemas/PayoutMoney'
        fees:
          $ref: '#/components/schemas/PayoutMoney'
        status:
          $ref: '#/components/schemas/PayoutStatus'
        errorCode:
          $ref: '#/components/schemas/PayoutErrorCode'
        riskEvaluation:
          $ref: '#/components/schemas/RiskEvaluation'
        createDate:
          $ref: '#/components/schemas/UtcTimestamp'
        updateDate:
          $ref: '#/components/schemas/UtcTimestamp'
    IdempotencyKey:
      type: string
      description: Universally unique identifier (UUID v4) idempotency key. This key
        is utilized to ensure exactly-once execution of mutating requests.
      format: uuid
      example: ba943ff1-ca16-49b2-ba55-1057e70ca5c7
    WalletLocation:
      type: object
      required:
      - type
      - id
      properties:
        type:
          type: string
          enum:
          - wallet
        id:
          type: string
          description: The id of the wallet.
          example: '12345'
    Email:
      type: string
      description: Email of the user.
      maxLength: 1024
      example: satoshi@circle.com
    MetadataPayout:
      type: object
      description: Additional properties related to the payout beneficiary.
      required:
      - beneficiaryEmail
      properties:
        beneficiaryEmail:
          $ref: '#/components/schemas/Email'
    FiatPayoutCreationRequest:
      type: object
      required:
      - idempotencyKey
      - destination
      - amount
      - metadata
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/IdempotencyKey'
        source:
          $ref: '#/components/schemas/WalletLocation'
        destination:
          type: object
          description: The destination.
          required:
          - type
          - id
          properties:
            type:
              $ref: '#/components/schemas/FiatPayoutDestinationType'
            id:
              $ref: '#/components/schemas/Id'
        amount:
          $ref: '#/components/schemas/FiatMoneyUsd'
        metadata:
          $ref: '#/components/schemas/MetadataPayout'
    IdentityAddress:
      type: object
      required:
      - line1
      - city
      - district
      - postalCode
      - country
      properties:
        line1:
          type: string
          description: Line one of the street address.
          maxLength: 1024
          example: 100 Money Street
        line2:
          type: string
          description: Line two of the street address.
          maxLength: 1024
          example: Suite 1
        city:
          type: string
          description: City portion of the address.
          maxLength: 1024
          example: Boston
        district:
          description: State / County / Province / Region portion of the address.
            If the country is US or Canada, then district is required and should use
            the two-letter code for the subdivision.
          type: string
          maxLength: 16
          example: MA
        postalCode:
          type: string
          description: Postal / ZIP code of the address.
          maxLength: 16
          example: '01234'
        country:
          type: string
          description: Country portion of the address. Formatted as a two-letter country
            code specified in ISO 3166-1 alpha-2.
          maxLength: 2
          example: US
    Identity:
      type: object
      description: "The identity of the originator. Identities are required when:\n\
        \  * `destination.type: \"blockchain\"`\n  * `destination.chain: \"ETH\"`\n\
        \  * `amount.amount` >= $3,000 in value\n"
      required:
      - type
      - name
      - addresses
      properties:
        type:
          type: string
          description: 'The type of identity for the originator.

            * `individual` - A uniquely distinguishable individual.

            * `business` - Any entity other than a natural person that can establish
            a permanent customer relationship with an affected entity or otherwise
            own property. This can include companies, foundations, anstalt, partnerships,
            associations and other relevantly similar entities.

            '
          enum:
          - individual
          - business
        name:
          type: string
          description: Full name of the identity.
          example: Satoshi Nakamoto
          maxLength: 1024
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/IdentityAddress'
    TransferSourceWalletLocation:
      description: A source wallet location.
      type: object
      required:
      - type
      - id
      properties:
        type:
          type: string
          enum:
          - wallet
        id:
          type: string
          description: The id of the wallet.
          example: '12345'
        identities:
          type: array
          items:
            $ref: '#/components/schemas/Identity'
    Money:
      type: object
      required:
      - amount
      - currency
      properties:
        amount:
          type: string
          description: Magnitude of the amount, in units of the currency, with a `.`.
          example: '3.14'
        currency:
          type: string
          description: Currency code for the amount.
          enum:
          - USD
          - EUR
          - BTC
          - ETH
    ToAmount:
      type: object
      required:
      - currency
      properties:
        currency:
          type: string
          description: Currency code for the amount.
          enum:
          - USD
          - EUR
          - BTC
          - ETH
          - MTC
    CryptoPayoutCreationRequest:
      type: object
      required:
      - idempotencyKey
      - destination
      - amount
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/IdempotencyKey'
        source:
          $ref: '#/components/schemas/TransferSourceWalletLocation'
        destination:
          $ref: '#/components/schemas/CryptoPayoutDestination'
        amount:
          $ref: '#/components/schemas/Money'
        toAmount:
          $ref: '#/components/schemas/ToAmount'
    ExternalRef:
      type: string
      description: "External network identifier which will be present once provided\
        \ from the applicable network. \n\nExamples:\n* **Input/Output Message Accountability\
        \ Data (IMAD/OMAD)**: unique number given to each FedWire payment when using\
        \ the Federal Reserve Bank Service which can be used to investigate and track\
        \ wire transfers.\n"
      example: YYYYMMDDXXXXXXXX012345
    FiatDetailedPayout:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        sourceWalletId:
          description: The identifier of the source wallet used to fund a payout.
          type: string
          example: '53535335'
        destination:
          $ref: '#/components/schemas/FiatPayoutDestination'
        amount:
          $ref: '#/components/schemas/FiatMoneyUsd'
        toAmount:
          $ref: '#/components/schemas/PayoutMoney'
        fees:
          $ref: '#/components/schemas/FiatMoneyUsd'
        status:
          description: Status of the payout. Status `pending` indicates that the payout
            is in process; `complete` indicates it finished successfully; `failed`
            indicates it failed.
          type: string
          enum:
          - pending
          - complete
          - failed
        trackingRef:
          description: A payout tracking reference. Will be present once known.
          nullable: true
          example: CIR-6ESOQANEP3NAO
        externalRef:
          $ref: '#/components/schemas/ExternalRef'
        errorCode:
          $ref: '#/components/schemas/PayoutErrorCode'
        riskEvaluation:
          $ref: '#/components/schemas/RiskEvaluation'
        adjustments:
          $ref: '#/components/schemas/FinalAdjustments'
        return:
          $ref: '#/components/schemas/UnwithdrawalObject'
        createDate:
          $ref: '#/components/schemas/UtcTimestamp'
        updateDate:
          $ref: '#/components/schemas/UtcTimestamp'
    Chain:
      type: string
      description: A blockchain that a given currency is available on.
      enum:
      - ALGO
      - AVAX
      - BTC
      - ETH
      - FLOW
      - HBAR
      - MATIC
      - SOL
      - TRX
      - XLM
    Address:
      type: string
      description: An alphanumeric string representing a blockchain address. Will
        be in different formats for different chains. It is important to preserve
        the exact formatting and capitalization of the address.
      example: '0x8381470ED67C3802402dbbFa0058E8871F017A6F'
    AddressTag:
      type: string
      description: The secondary identifier for a blockchain address. An example of
        this is the memo field on the Stellar network, which can be text, id, or hash
        format.
      nullable: true
      example: '123456789'
    AddressBookRecipientMetadata:
      type: object
      properties:
        nickname:
          type: string
          description: Nickname related to the address.
          example: sample nickname
        email:
          $ref: '#/components/schemas/Email'
        bns:
          type: string
          description: Blockchain Name Service (e.g. ENS) domain for the address.
          example: sample.circle
    AddressBookRecipient:
      type: object
      required:
      - chain
      - address
      - metadata
      properties:
        id:
          $ref: '#/components/schemas/Id'
        chain:
          $ref: '#/components/schemas/Chain'
        address:
          $ref: '#/components/schemas/Address'
        addressTag:
          $ref: '#/components/schemas/AddressTag'
        metadata:
          $ref: '#/components/schemas/AddressBookRecipientMetadata'
        status:
          type: string
          description: Status of the address book recipient.
          enum:
          - pending
          - inactive
          - active
          - denied
        createDate:
          $ref: '#/components/schemas/UtcTimestamp'
        updateDate:
          $ref: '#/components/schemas/UtcTimestamp'
    AddressBookRecipientRequest:
      type: object
      required:
      - idempotencyKey
      - chain
      - address
      - metadata
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/IdempotencyKey'
        chain:
          $ref: '#/components/schemas/Chain'
        address:
          $ref: '#/components/schemas/Address'
        addressTag:
          $ref: '#/components/schemas/AddressTag'
        metadata:
          $ref: '#/components/schemas/AddressBookRecipientMetadata'
    AddressBookRecipientModifyRequest:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/AddressBookRecipientMetadata'
    BillingDetails:
      type: object
      required:
      - name
      - city
      - country
      - line1
      - postalCode
      properties:
        name:
          type: string
          description: Full name of the card or bank account holder.
          maxLength: 1024
          example: Satoshi Nakamoto
        city:
          type: string
          description: City portion of the address.
          maxLength: 1024
          example: Boston
        country:
          type: string
          description: Country portion of the address. Formatted as a two-letter country
            code specified in ISO 3166-1 alpha-2.
          maxLength: 2
          example: US
        line1:
          type: string
          description: Line one of the street address.
          maxLength: 1024
          example: 100 Money Street
        line2:
          type: string
          description: Line two of the street address.
          maxLength: 1024
          example: Suite 1
        district:
          description: State / County / Province / Region portion of the address.
            If the country is US or Canada, then district is required and should use
            the two-letter code for the subdivision.
          type: string
          maxLength: 16
          example: MA
        postalCode:
          type: string
          description: Postal / ZIP code of the address.
          maxLength: 16
          example: '01234'
    BankAddress:
      type: object
      description: The address details for the bank, as provided during bank account
        creation.
      required:
      - country
      properties:
        bankName:
          type: string
          description: Name of the bank. This property is required for bank accounts
            outside of the US that do not support IBAN'
          maxLength: 35
          example: SAN FRANCISCO
        city:
          type: string
          description: City portion of the address. This property is required for
            bank accounts outside of the US.
          maxLength: 35
          example: SAN FRANCISCO
        country:
          type: string
          description: Country portion of the address. Formatted as a two-letter country
            code specified in ISO 3166-1 alpha-2.
          maxLength: 2
          example: US
        line1:
          type: string
          description: Line one of the street address.
          maxLength: 35
          example: 100 Money Street
        line2:
          type: string
          description: Line two of the street address.
          maxLength: 35
          example: Suite 1
        district:
          type: string
          description: State / County / Province / Region portion of the address.
            US and Canada use the two-letter code for the subdivision.
          maxLength: 16
          example: CA
    WireCreationRequestUs:
      type: object
      title: US Bank Account
      description: Relevant fields for U.S. bank accounts.
      required:
      - idempotencyKey
      - accountNumber
      - routingNumber
      - billingDetails
      - bankAddress
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/IdempotencyKey'
        accountNumber:
          description: Account number that identifies the bank account.
          type: string
          example: '12340010'
          minLength: 6
          maxLength: 35
        routingNumber:
          description: ABA routing number for the bank account. Note this has to be
            specific for bank wire transfers.
          type: string
          example: '121000248'
        billingDetails:
          $ref: '#/components/schemas/BillingDetails'
        bankAddress:
          $ref: '#/components/schemas/BankAddress'
    BankAddressIbanSupported:
      type: object
      description: The address of the bank. City and country fields are required.
      required:
      - city
      - country
      properties:
        bankName:
          type: string
          description: Name of the bank. This property is required for bank accounts
            outside of the US that do not support IBAN'
          maxLength: 35
          example: SAN FRANCISCO
        city:
          type: string
          description: City portion of the address. This property is required for
            bank accounts outside of the US.
          maxLength: 1024
          example: SAN FRANCISCO
        country:
          type: string
          description: Country portion of the address. Formatted as a two-letter country
            code specified in ISO 3166-1 alpha-2.
          maxLength: 2
          example: US
        line1:
          type: string
          description: Line one of the street address.
          maxLength: 35
          example: 100 Money Street
        line2:
          type: string
          description: Line two of the street address.
          maxLength: 35
          example: Suite 1
        district:
          type: string
          description: State / County / Province / Region portion of the address.
            US and Canada use the two-letter code for the subdivision.
          maxLength: 16
          example: CA
    WireCreationRequestIban:
      type: object
      title: Non US Bank Account - IBAN Supported
      description: Relevant fields for non-U.S. bank accounts that support IBAN.
      required:
      - idempotencyKey
      - iban
      - billingDetails
      - bankAddress
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/IdempotencyKey'
        iban:
          description: International Bank Account Number (IBAN) for the bank account.
          type: string
          example: DE31100400480532013000
        billingDetails:
          $ref: '#/components/schemas/BillingDetails'
        bankAddress:
          $ref: '#/components/schemas/BankAddressIbanSupported'
    BankAddressNonIban:
      type: object
      description: The address of the bank. BankName, City and Country fields are
        required.
      required:
      - bankName
      - city
      - country
      properties:
        bankName:
          type: string
          description: Name of the bank. This property is required for bank accounts
            outside of the US that do not support IBAN'
          maxLength: 35
          example: SAN FRANCISCO
        city:
          type: string
          description: City portion of the address. This property is required for
            bank accounts outside of the US.
          maxLength: 1024
          example: SAN FRANCISCO
        country:
          type: string
          description: Country portion of the address. Formatted as a two-letter country
            code specified in ISO 3166-1 alpha-2.
          maxLength: 2
          example: US
        line1:
          type: string
          description: Line one of the street address.
          maxLength: 35
          example: 100 Money Street
        line2:
          type: string
          description: Line two of the street address.
          maxLength: 35
          example: Suite 1
        district:
          type: string
          description: State / County / Province / Region portion of the address.
            US and Canada use the two-letter code for the subdivision.
          maxLength: 16
          example: CA
    WireCreationRequestAccountNumber:
      type: object
      title: Non US Bank Account - IBAN Not Supported
      description: Relevant fields for non-U.S. banks that do NOT support IBAN.
      required:
      - idempotencyKey
      - accountNumber
      - routingNumber
      - billingDetails
      - bankAddress
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/IdempotencyKey'
        accountNumber:
          description: Account number that identifies the bank account.
          type: string
          example: 0321800123
          minLength: 6
          maxLength: 35
        routingNumber:
          description: The bank's SWIFT / BIC code.
          type: string
          example: SBININBB354
        billingDetails:
          $ref: '#/components/schemas/BillingDetails'
        bankAddress:
          $ref: '#/components/schemas/BankAddressNonIban'
    WireCreationRequest:
      type: object
      description: Request object used to create a bank account (wires). Different
        fields are required depending on the bank country, see the guide documentation
        for the list of supported bank countries along with which ones support IBAN.
      oneOf:
      - $ref: '#/components/schemas/WireCreationRequestUs'
      - $ref: '#/components/schemas/WireCreationRequestIban'
      - $ref: '#/components/schemas/WireCreationRequestAccountNumber'
    ExternalFiatAccountStatus:
      description: Status of the account. A `pending` status indicates that the linking
        is in-progress; `complete` indicates the account was linked successfully;
        `failed` indicates it failed.
      type: string
      enum:
      - pending
      - complete
      - failed
    Fingerprint:
      type: string
      description: A UUID that uniquely identifies the account number. If the same
        account is used more than once, each card object will have a different id,
        but the fingerprint will stay the same.
      example: eb170539-9e1c-4e92-bf4f-1d09534fdca2
    Wire:
      type: object
      required:
      - id
      - status
      - description
      - trackingRef
      - fingerprint
      - billingDetails
      - createDate
      - updateDate
      properties:
        id:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/ExternalFiatAccountStatus'
        description:
          type: string
          description: Bank name plus last four digits of the bank account number
            or IBAN.
          example: WELLS FARGO BANK, NA ****0010
        trackingRef:
          type: string
          description: Wire tracking ref that needs to be set in the wire reference
            to beneficiary field.
          example: CIR13FB13A
        fingerprint:
          $ref: '#/components/schemas/Fingerprint'
        billingDetails:
          $ref: '#/components/schemas/BillingDetails'
        bankAddress:
          $ref: '#/components/schemas/BankAddress'
        createDate:
          $ref: '#/components/schemas/UtcTimestamp'
        updateDate:
          $ref: '#/components/schemas/UtcTimestamp'
    AchBillingDetails:
      type: object
      description: Billing details of the account holder.
      required:
      - name
      properties:
        name:
          type: string
          description: Full name of the card or bank account holder.
          maxLength: 1024
          example: Satoshi Nakamoto
        city:
          type: string
          description: City portion of the address.
          maxLength: 1024
          example: Boston
        country:
          type: string
          description: Country portion of the address. Formatted as a two-letter country
            code specified in ISO 3166-1 alpha-2.
          maxLength: 2
          example: US
        line1:
          type: string
          description: Line one of the street address.
          maxLength: 1024
          example: 100 Money Street
        line2:
          type: string
          description: Line two of the street address.
          maxLength: 1024
          example: Suite 1
        district:
          type: string
          description: State / County / Province / Region portion of the address.
            If the country is US or Canada, then district is required and should use
            the two-letter code for the subdivision.
          maxLength: 16
          example: MA
        postalCode:
          type: string
          description: Postal / ZIP code of the address.
          maxLength: 16
          example: '01234'
    AchAccountType:
      type: string
      description: Retail account (individual consumer account) or Business account
        (e.g. sole prop, LLC, corporation).
      nullable: true
      enum:
      - retail
      - business
    PhoneNumber:
      type: string
      description: Phone number of the user in E.164 format. We recommend using a
        library such as [libphonenumber](https://github.com/google/libphonenumber)
        to parse and validate phone numbers.
      maxLength: 16
      pattern: /\+?[1-9]\d{1,14}/
      example: '+14155555555'
    SessionId:
      description: 'Hash of the session identifier; typically of the end user. This
        helps us make risk decisions and prevent fraud. IMPORTANT: Please hash the
        session identifier to prevent sending us actual session identifiers.

        '
      type: string
      maxLength: 50
      example: DE6FA86F60BB47B379307F851E238617
    IpAddress:
      type: string
      description: Single IPv4 or IPv6 address of user'
      example: 244.28.239.130
    MetadataCardAndAch:
      type: object
      required:
      - email
      - sessionId
      - ipAddress
      properties:
        email:
          $ref: '#/components/schemas/Email'
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        sessionId:
          $ref: '#/components/schemas/SessionId'
        ipAddress:
          $ref: '#/components/schemas/IpAddress'
    AchCreationRequest:
      type: object
      required:
      - idempotencyKey
      - plaidProcessorToken
      - billingDetails
      - metadata
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/IdempotencyKey'
        plaidProcessorToken:
          type: string
          description: The token for the ACH account provided by the processor (Plaid).
          example: processor-sandbox-circle-82cf95bb-43f8-4191-8d30-2c9f42853621
        billingDetails:
          $ref: '#/components/schemas/AchBillingDetails'
        bankAccountType:
          $ref: '#/components/schemas/AchAccountType'
        metadata:
          $ref: '#/components/schemas/MetadataCardAndAch'
    AccountNumberMasked:
      type: string
      description: The redacted account number of the ACH account.
      example: '****6789'
    RoutingNumber:
      type: string
      description: The routing number of the ACH account.
      example: '613334455'
    AchVerificationErrorCodes:
      type: string
      description: Indicates the failure reason of the ACH account. Only present on
        failed accounts. Possible values are [bank_account_authorization_expired,
        bank_account_error, bank_account_ineligible, bank_account_not_found, bank_account_unauthorized,
        unsupported_routing_number, verification_failed].
      nullable: true
      enum:
      - bank_account_authorization_expired
      - bank_account_error
      - bank_account_ineligible
      - bank_account_not_found
      - bank_account_unauthorized
      - unsupported_routing_number
      - verification_failed
    MetadataPhoneEmail:
      type: object
      required:
      - email
      properties:
        email:
          $ref: '#/components/schemas/Email'
        phoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
    Ach:
      type: object
      required:
      - id
      - accountNumber
      - routingNumber
      - description
      - billingDetails
      - bankAddress
      - fingerprint
      - metadata
      - createDate
      - updateDate
      properties:
        id:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/ExternalFiatAccountStatus'
        accountNumber:
          $ref: '#/components/schemas/AccountNumberMasked'
        routingNumber:
          $ref: '#/components/schemas/RoutingNumber'
        billingDetails:
          $ref: '#/components/schemas/AchBillingDetails'
        bankAccountType:
          $ref: '#/components/schemas/AchAccountType'
        bankAddress:
          $ref: '#/components/schemas/BankAddress'
        fingerprint:
          $ref: '#/components/schemas/Fingerprint'
        errorCode:
          $ref: '#/components/schemas/AchVerificationErrorCodes'
        riskEvaluation:
          $ref: '#/components/schemas/RiskEvaluation'
        createDate:
          $ref: '#/components/schemas/UtcTimestamp'
        updateDate:
          $ref: '#/components/schemas/UtcTimestamp'
        metadata:
          $ref: '#/components/schemas/MetadataPhoneEmail'
    MockAchAccount:
      type: object
      required:
      - accountNumber
      - routingNumber
      - description
      properties:
        accountNumber:
          type: string
          description: The account number of the ACH account.
          example: '123456789'
        routingNumber:
          type: string
          description: 'The routing number of the ACH account.


            For sandbox testing, valid routing numbers include `011000028`, `011201762`,
            `011500120`, `021214862`, `121000248`, `121140399`, `211073473`, `221172610`,
            and `011000138`.

            '
          example: 011000028
        description:
          type: string
          description: A description for the ACH account.
          example: My ACH account
    MockAchAccountCreationRequest:
      type: object
      required:
      - account
      - balance
      properties:
        account:
          $ref: '#/components/schemas/MockAchAccount'
        balance:
          $ref: '#/components/schemas/FiatMoneyUsd'
    MockAchAccountResponse:
      type: object
      properties:
        processorToken:
          type: string
          description: The processor token needs to be provided when linking an ACH
            account against this mock.
          example: processor-sandbox-circle-82cf95bb-43f8-4191-8d30-2c9f42853621
        balance:
          $ref: '#/components/schemas/FiatMoneyUsd'
        account:
          $ref: '#/components/schemas/MockAchAccount'
    SepaCreationRequest:
      type: object
      required:
      - idempotencyKey
      - accountName
      - iban
      - billingDetails
      properties:
        idempotencyKey:
          $ref: '#/components/schemas/IdempotencyKey'
        iban:
          type: string
          description: International Bank Account Number (IBAN) for the bank account.
          example: DE31100400480532013000
        billingDetails:
          $ref: '#/components/schemas/BillingDetails'
    Sepa:
      type: object
      required:
      - id
      - status
      - description
      - trackingRef
      - fingerprint
      - billingDetails
      - createDate
      - updateDate
      properties:
        id:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/ExternalFiatAccountStatus'
        description:
          type: string
          description: Bank name plus last four digits of the IBAN.
          example: Bank of Ireland ****0010
        trackingRef:
          type: string
          description: Tracking reference that needs to be set in the payment details
            or description.
          example: CIR13FB13A
        fingerprint:
          $ref: '#/components/schemas/Fingerprint'
        riskEvaluation:
          $ref: '#/components/schemas/RiskEvaluation'
        billingDetails:
          $ref: '#/components/schemas/BillingDetails'
        createDate:
          $ref: '#/components/schemas/UtcTimestamp'
        updateDate:
          $ref: '#/components/schemas/UtcTimestamp'
    Rate:
      type: object
      required:
      - buy
      - sell
      - createDate
      properties:
        buy:
          type: string
          description: The buy rate denominated in the quote currency of the trading
            pair.
          example: '46317.59000'
        sell:
          type: string
          description: The sell rate denominated in the quote currency of the trading
            pair.
          example: '45400.41000'
        createDate:
          $ref: '#/components/schemas/UtcTimestamp'
  parameters:
    Chain:
      name: chain
      description: Queries items with the specified chain. Matches any chain if unspecified
      in: query
      required: false
      schema:
        type: string
        enum:
        - ALGO
        - AVAX
        - BTC
        - ETH
        - FLOW
        - HBAR
        - MATIC
        - SOL
        - TRX
        - XLM
    From:
      name: from
      description: Queries items created since the specified date-time (inclusive).
      in: query
      required: false
      schema:
        type: string
        format: date-time
        example: '2020-04-10T02:13:30.000Z'
    To:
      name: to
      description: Queries items created before the specified date-time (inclusive).
      in: query
      required: false
      schema:
        type: string
        format: date-time
        example: '2020-04-10T02:13:30.000Z'
    PageBefore:
      name: pageBefore
      description: 'A collection ID value used for pagination.


        It marks the exclusive end of a page. When provided, the collection resource
        will return the next `n` items before

        the id, with `n` being specified by `pageSize`.


        The items will be returned in the natural order of the collection.


        The resource will return the first page if neither `pageAfter` nor `pageBefore`
        are specified.


        SHOULD NOT be used in conjuction with pageAfter.

        '
      in: query
      required: false
      schema:
        type: string
    PageAfter:
      name: pageAfter
      description: 'A collection ID value used for pagination.


        It marks the exclusive begin of a page. When provided, the collection resource
        will return the next `n` items after

        the id, with `n` being specified by `pageSize`.


        The items will be returned in the natural order of the collection.


        The resource will return the first page if neither `pageAfter` nor `pageBefore`
        are specified.


        SHOULD NOT be used in conjuction with pageBefore.

        '
      in: query
      required: false
      schema:
        type: string
    PageSize:
      name: pageSize
      description: 'Limits the number of items to be returned.


        Some collections have a strict upper bound that will disregard this value.
        In case the specified value is higher

        than the allowed limit, the collection limit will be used.


        If avoided, the collection will determine the page size itself.

        '
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        example: 5
    IdPath:
      name: id
      description: Universally unique identifier (UUID v4) of a resource.
      in: path
      required: true
      schema:
        type: string
        format: uuid
        example: b3d9d2d5-4c12-4946-a09d-953e82fae2b0
  headers:
    XRequestId:
      description: Universally unique identifier (UUID v4) for the request. Helpful
        for identifying a request when communicating with Circle support.
      schema:
        type: string
        format: uuid
        example: 2adba88e-9d63-44bc-b975-9b6ae3440dde
  responses:
    NotAuthorized:
      description: The request has not been applied because it lacks valid authentication
        credentials.
      headers:
        X-Request-Id:
          $ref: '#/components/headers/XRequestId'
      content:
        application/json:
          schema:
            type: object
            title: NotAuthorized
            required:
            - code
            - message
            properties:
              code:
                type: integer
                example: 400
              message:
                type: string
                example: Something went wrong.
            example:
              code: 401
              message: Malformed authorization.
          examples:
            response:
              value:
                code: 401
                message: Malformed authorization.
    BadRequest:
      description: The request cannot be processed due to a client error.
      headers:
        X-Request-Id:
          $ref: '#/components/headers/XRequestId'
      content:
        application/json:
          schema:
            type: object
            title: BadRequest
            required:
            - code
            - message
            properties:
              code:
                type: integer
                example: 400
              message:
                type: string
                example: Something went wrong.
            example:
              code: 400
              message: Bad request.
          examples:
            response:
              value:
                code: 400
                message: Bad request.
    NotFound:
      description: The specified resource was not found.
      headers:
        X-Request-Id:
          $ref: '#/components/headers/XRequestId'
      content:
        application/json:
          schema:
            type: object
            title: NotFound
            required:
            - code
            - message
            properties:
              code:
                type: integer
                example: 400
              message:
                type: string
                example: Something went wrong.
            example:
              code: 404
              message: Not found.
          examples:
            response:
              value:
                code: 404
                message: Not found.
